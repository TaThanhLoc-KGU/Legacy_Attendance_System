package com.tathanhloc.faceattendance.Service;

import com.tathanhloc.faceattendance.DTO.*;
import com.tathanhloc.faceattendance.Enum.TrangThaiDiemDanhEnum;
import com.tathanhloc.faceattendance.Exception.BusinessException;
import com.tathanhloc.faceattendance.Exception.ResourceNotFoundException;
import com.tathanhloc.faceattendance.Model.*;
import com.tathanhloc.faceattendance.Repository.*;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class DiemDanhService extends BaseService<DiemDanh, Long, DiemDanhDTO> {

    private final DiemDanhRepository diemDanhRepository;
    private final LichHocRepository lichHocRepository;
    private final SinhVienRepository sinhVienRepository;
    private final DangKyHocRepository dangKyHocRepository;
    private final CameraRepository cameraRepository;
    private final ExcelService excelService;
    private final DangKyHocService dangKyHocService;
    private final LichHocService lichHocService;
    private final SinhVienService sinhVienService;
    private final LopHocPhanRepository lopHocPhanRepository;
    // C·∫•u h√¨nh th·ªùi gian cho ph√©p ƒëi·ªÉm danh
    private static final int ATTENDANCE_BEFORE_CLASS_MINUTES = 60; // Cho ph√©p ƒëi·ªÉm danh tr∆∞·ªõc 60 ph√∫t
    private static final int ATTENDANCE_AFTER_CLASS_MINUTES = 30;  // Cho ph√©p ƒëi·ªÉm danh sau 30 ph√∫t

    @Override
    protected JpaRepository<DiemDanh, Long> getRepository() {
        return diemDanhRepository;
    }

    @Override
    protected void setActive(DiemDanh entity, boolean active) {
        // DiemDanh kh√¥ng c√≥ tr∆∞·ªùng isActive
    }

    @Override
    protected boolean isActive(DiemDanh entity) {
        // DiemDanh kh√¥ng c√≥ tr∆∞·ªùng isActive, lu√¥n tr·∫£ v·ªÅ true
        return true;
    }

    @Transactional
    public DiemDanhDTO create(DiemDanhDTO dto) {
        log.info("T·∫°o ƒëi·ªÉm danh m·ªõi: {}", dto);

        // Ki·ªÉm tra sinh vi√™n c√≥ ƒëƒÉng k√Ω l·ªõp h·ªçc ph·∫ßn kh√¥ng
        LichHoc lichHoc = lichHocRepository.findById(dto.getMaLich())
                .orElseThrow(() -> new ResourceNotFoundException("L·ªãch h·ªçc", "m√£ l·ªãch", dto.getMaLich()));

        String maLhp = lichHoc.getLopHocPhan().getMaLhp();
        String maSv = dto.getMaSv();

        DangKyHocId dangKyHocId = new DangKyHocId(maSv, maLhp);
        DangKyHoc dangKyHoc = dangKyHocRepository.findById(dangKyHocId)
                .orElseThrow(() -> new RuntimeException("Sinh vi√™n ch∆∞a ƒëƒÉng k√Ω l·ªõp h·ªçc ph·∫ßn n√†y"));

        if (!dangKyHoc.isActive()) {
            throw new RuntimeException("ƒêƒÉng k√Ω h·ªçc ph·∫ßn kh√¥ng c√≤n hi·ªáu l·ª±c");
        }

        DiemDanh entity = toEntity(dto);
        entity.setId(null); // auto-generated
        return toDTO(diemDanhRepository.save(entity));
    }

    @Transactional
    public DiemDanhDTO update(Long id, DiemDanhDTO dto) {
        log.info("C·∫≠p nh·∫≠t ƒëi·ªÉm danh ID {}: {}", id, dto);

        DiemDanh existing = diemDanhRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("ƒêi·ªÉm danh", "ID", id));

        existing.setNgayDiemDanh(dto.getNgayDiemDanh());
        existing.setTrangThai(dto.getTrangThai());
        existing.setThoiGianVao(dto.getThoiGianVao());
        existing.setThoiGianRa(dto.getThoiGianRa());

        if (!existing.getLichHoc().getMaLich().equals(dto.getMaLich())) {
            existing.setLichHoc(lichHocRepository.findById(dto.getMaLich())
                    .orElseThrow(() -> new ResourceNotFoundException("L·ªãch h·ªçc", "m√£ l·ªãch", dto.getMaLich())));
        }

        if (!existing.getSinhVien().getMaSv().equals(dto.getMaSv())) {
            existing.setSinhVien(sinhVienRepository.findById(dto.getMaSv())
                    .orElseThrow(() -> new ResourceNotFoundException("Sinh vi√™n", "m√£ sinh vi√™n", dto.getMaSv())));

            // Ki·ªÉm tra sinh vi√™n c√≥ ƒëƒÉng k√Ω l·ªõp h·ªçc ph·∫ßn kh√¥ng
            String maLhp = existing.getLichHoc().getLopHocPhan().getMaLhp();
            String maSv = dto.getMaSv();

            DangKyHocId dangKyHocId = new DangKyHocId(maSv, maLhp);
            DangKyHoc dangKyHoc = dangKyHocRepository.findById(dangKyHocId)
                    .orElseThrow(() -> new RuntimeException("Sinh vi√™n ch∆∞a ƒëƒÉng k√Ω l·ªõp h·ªçc ph·∫ßn n√†y"));

            if (!dangKyHoc.isActive()) {
                throw new RuntimeException("ƒêƒÉng k√Ω h·ªçc ph·∫ßn kh√¥ng c√≤n hi·ªáu l·ª±c");
            }
        }

        return toDTO(diemDanhRepository.save(existing));
    }

    public void delete(Long id) {
        log.info("X√≥a ƒëi·ªÉm danh ID: {}", id);

        if (!diemDanhRepository.existsById(id)) {
            throw new ResourceNotFoundException("ƒêi·ªÉm danh", "ID", id);
        }
        diemDanhRepository.deleteById(id);
    }

    // Mapping
    @Override
    protected DiemDanhDTO toDTO(DiemDanh d) {
        return DiemDanhDTO.builder()
                .id(d.getId())
                .ngayDiemDanh(d.getNgayDiemDanh())
                .trangThai(d.getTrangThai())
                .thoiGianVao(d.getThoiGianVao())
                .thoiGianRa(d.getThoiGianRa())
                .maLich(d.getLichHoc().getMaLich())
                .maSv(d.getSinhVien().getMaSv())
                .maLhp(d.getLichHoc().getLopHocPhan().getMaLhp())
                .build();
    }

    @Override
    protected DiemDanh toEntity(DiemDanhDTO dto) {
        LichHoc lichHoc = lichHocRepository.findById(dto.getMaLich())
                .orElseThrow(() -> new ResourceNotFoundException("L·ªãch h·ªçc", "m√£ l·ªãch", dto.getMaLich()));

        SinhVien sinhVien = sinhVienRepository.findById(dto.getMaSv())
                .orElseThrow(() -> new ResourceNotFoundException("Sinh vi√™n", "m√£ sinh vi√™n", dto.getMaSv()));

        return DiemDanh.builder()
                .id(dto.getId())
                .ngayDiemDanh(dto.getNgayDiemDanh() != null ? dto.getNgayDiemDanh() : LocalDate.now())
                .trangThai(dto.getTrangThai() != null ? dto.getTrangThai() : TrangThaiDiemDanhEnum.CO_MAT)
                .thoiGianVao(dto.getThoiGianVao())
                .thoiGianRa(dto.getThoiGianRa())
                .lichHoc(lichHoc)
                .sinhVien(sinhVien)
                .build();
    }

    public List<DiemDanhDTO> getByMaSv(String maSv) {
        log.info("L·∫•y danh s√°ch ƒëi·ªÉm danh theo m√£ sinh vi√™n: {}", maSv);

        if (!sinhVienRepository.existsById(maSv)) {
            throw new ResourceNotFoundException("Sinh vi√™n", "m√£ sinh vi√™n", maSv);
        }

        return diemDanhRepository.findBySinhVienMaSv(maSv).stream()
                .map(this::toDTO).toList();
    }

    public List<DiemDanhDTO> getByMaLich(String maLich) {
        log.info("L·∫•y danh s√°ch ƒëi·ªÉm danh theo m√£ l·ªãch: {}", maLich);

        if (!lichHocRepository.existsById(maLich)) {
            throw new ResourceNotFoundException("L·ªãch h·ªçc", "m√£ l·ªãch", maLich);
        }

        return diemDanhRepository.findByLichHocMaLich(maLich).stream()
                .map(this::toDTO).toList();
    }


    /**
     * API ch√≠nh cho camera g·ªçi - ch·ªâ c·∫ßn studentId v√† cameraId
     */
    @Transactional
    public DiemDanhDTO recordAttendanceFromCamera(String maSv, Long cameraId) {
        // 1. L·∫•y camera v√† ph√≤ng h·ªçc
        Camera camera = cameraRepository.findById(cameraId)
                .orElseThrow(() -> new ResourceNotFoundException("Camera", "id", cameraId));

        if (camera.getMaPhong() == null) {
            throw new RuntimeException("Camera ch∆∞a ƒë∆∞·ª£c g√°n ph√≤ng h·ªçc");
        }

        // 2. T√¨m l·ªãch h·ªçc hi·ªán t·∫°i ·ªü ph√≤ng n√†y
        String maLich = findCurrentScheduleAtRoom(camera.getMaPhong().getMaPhong());

        // 3. T·∫°o DTO v√† g·ªçi method create() c√≥ s·∫µn
        DiemDanhDTO dto = DiemDanhDTO.builder()
                .maSv(maSv)
                .maLich(maLich)
                .ngayDiemDanh(LocalDate.now())
                .thoiGianVao(LocalTime.now())
                .trangThai(TrangThaiDiemDanhEnum.CO_MAT)
                .build();

        return create(dto); // S·ª≠ d·ª•ng logic create() ƒë√£ c√≥
    }

    /**
     * T√¨m l·ªãch h·ªçc ƒëang di·ªÖn ra ho·∫∑c s·∫Øp di·ªÖn ra t·∫°i ph√≤ng
     * Bao g·ªìm c·∫£ th·ªùi gian buffer tr∆∞·ªõc v√† sau gi·ªù h·ªçc
     */
    private String findCurrentScheduleAtRoom(String maPhong) {
        LocalDate today = LocalDate.now();
        LocalTime now = LocalTime.now();
        int dayOfWeek = today.getDayOfWeek().getValue(); // 1=Mon, 7=Sun

        log.info("üîç T√¨m l·ªãch h·ªçc t·∫°i ph√≤ng {} l√∫c {} ng√†y {}", maPhong, now, today);

        // T√¨m t·∫•t c·∫£ l·ªãch h·ªçc ·ªü ph√≤ng n√†y h√¥m nay
        List<LichHoc> schedules = lichHocRepository
                .findByPhongHocMaPhongAndThuAndIsActiveTrue(maPhong, dayOfWeek);

        if (schedules.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ l·ªãch h·ªçc n√†o t·∫°i ph√≤ng {} v√†o th·ª© {}", maPhong, dayOfWeek);
            throw new RuntimeException("Kh√¥ng c√≥ l·ªãch h·ªçc n√†o ƒë∆∞·ª£c l√™n l·ªãch t·∫°i ph√≤ng n√†y h√¥m nay");
        }

        // T√¨m l·ªãch h·ªçc ph√π h·ª£p (ƒëang di·ªÖn ra ho·∫∑c trong th·ªùi gian buffer)
        for (LichHoc lichHoc : schedules) {
            if (isTimeInScheduleWithBuffer(lichHoc, now)) {
                log.info("‚úÖ T√¨m th·∫•y l·ªãch h·ªçc ph√π h·ª£p: {} - Ti·∫øt {}-{}",
                        lichHoc.getMaLich(),
                        lichHoc.getTietBatDau(),
                        lichHoc.getTietBatDau() + lichHoc.getSoTiet() - 1);
                return lichHoc.getMaLich();
            }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y, hi·ªÉn th·ªã th√¥ng tin debug
        log.warn("‚ùå Kh√¥ng c√≥ l·ªãch h·ªçc n√†o ph√π h·ª£p. Chi ti·∫øt:");
        for (LichHoc lichHoc : schedules) {
            LocalTime startTime = calculateStartTime(lichHoc.getTietBatDau());
            LocalTime endTime = calculateEndTime(lichHoc.getTietBatDau(), lichHoc.getSoTiet());
            LocalTime bufferStart = startTime.minusMinutes(ATTENDANCE_BEFORE_CLASS_MINUTES);
            LocalTime bufferEnd = endTime.plusMinutes(ATTENDANCE_AFTER_CLASS_MINUTES);

            log.warn("   L·ªãch {}: {}~{} (buffer: {}~{})",
                    lichHoc.getMaLich(), startTime, endTime, bufferStart, bufferEnd);
        }

        throw new RuntimeException("Kh√¥ng c√≥ l·ªãch h·ªçc n√†o ƒëang di·ªÖn ra t·∫°i ph√≤ng n√†y trong th·ªùi gian cho ph√©p ƒëi·ªÉm danh");
    }

    /**
     * Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i c√≥ trong khung gi·ªù h·ªçc kh√¥ng (bao g·ªìm buffer)
     * Buffer: cho ph√©p ƒëi·ªÉm danh tr∆∞·ªõc v√† sau gi·ªù h·ªçc
     */
    private boolean isTimeInScheduleWithBuffer(LichHoc lichHoc, LocalTime currentTime) {
        LocalTime startTime = calculateStartTime(lichHoc.getTietBatDau());
        LocalTime endTime = calculateEndTime(lichHoc.getTietBatDau(), lichHoc.getSoTiet());

        // Th·ªùi gian cho ph√©p ƒëi·ªÉm danh (c√≥ buffer)
        LocalTime allowedStartTime = startTime.minusMinutes(ATTENDANCE_BEFORE_CLASS_MINUTES);
        LocalTime allowedEndTime = endTime.plusMinutes(ATTENDANCE_AFTER_CLASS_MINUTES);

        log.debug("üìä Ki·ªÉm tra th·ªùi gian - Hi·ªán t·∫°i: {}, Cho ph√©p: {} ~ {} (L·ªãch g·ªëc: {} ~ {})",
                currentTime, allowedStartTime, allowedEndTime, startTime, endTime);

        return !currentTime.isBefore(allowedStartTime) && !currentTime.isAfter(allowedEndTime);
    }

    /**
     * Th·ªëng k√™ ƒëi·ªÉm danh t·ªïng quan
     */
    public Map<String, Object> getAttendanceStatistics() {
        log.info("L·∫•y th·ªëng k√™ ƒëi·ªÉm danh t·ªïng quan");

        Map<String, Object> stats = new HashMap<>();

        try {
            // Th·ªëng k√™ theo tr·∫°ng th√°i
            long totalPresent = diemDanhRepository.countByTrangThai(TrangThaiDiemDanhEnum.CO_MAT);
            long totalAbsent = diemDanhRepository.countByTrangThai(TrangThaiDiemDanhEnum.VANG_MAT);
            long totalLate = diemDanhRepository.countByTrangThai(TrangThaiDiemDanhEnum.DI_TRE);
            long totalExcused = diemDanhRepository.countByTrangThai(TrangThaiDiemDanhEnum.VANG_CO_PHEP);

            stats.put("totalPresent", totalPresent);
            stats.put("totalAbsent", totalAbsent);
            stats.put("totalLate", totalLate);
            stats.put("totalExcused", totalExcused);

            // Th·ªëng k√™ h√¥m nay
            LocalDate today = LocalDate.now();
            long todayPresent = diemDanhRepository.countByNgayDiemDanhAndTrangThai(today, TrangThaiDiemDanhEnum.CO_MAT);
            long todayAbsent = diemDanhRepository.countByNgayDiemDanhAndTrangThai(today, TrangThaiDiemDanhEnum.VANG_MAT);
            long todayLate = diemDanhRepository.countByNgayDiemDanhAndTrangThai(today, TrangThaiDiemDanhEnum.DI_TRE);
            long todayClasses = diemDanhRepository.countDistinctLichHocByNgayDiemDanh(today);

            stats.put("todayPresent", todayPresent);
            stats.put("todayAbsent", todayAbsent);
            stats.put("todayLate", todayLate);
            stats.put("todayClasses", todayClasses);

        } catch (Exception e) {
            log.error("Error getting attendance statistics", e);
            // Return default values on error
            stats.put("totalPresent", 0L);
            stats.put("totalAbsent", 0L);
            stats.put("totalLate", 0L);
            stats.put("totalExcused", 0L);
            stats.put("todayPresent", 0L);
            stats.put("todayAbsent", 0L);
            stats.put("todayLate", 0L);
            stats.put("todayClasses", 0L);
        }

        return stats;
    }

    /**
     * Th·ªëng k√™ ƒëi·ªÉm danh theo kho·∫£ng th·ªùi gian
     */
    public Map<String, Object> getAttendanceStatisticsByDateRange(LocalDate fromDate, LocalDate toDate) {
        log.info("L·∫•y th·ªëng k√™ ƒëi·ªÉm danh t·ª´ {} ƒë·∫øn {}", fromDate, toDate);

        Map<String, Object> stats = new HashMap<>();

        try {
            // Th·ªëng k√™ theo ng√†y - FIXED: Handle Object[]
            List<Object[]> dailyStatsRows = diemDanhRepository.findDailyAttendanceStats(fromDate, toDate);
            List<Map<String, Object>> dailyStats = new ArrayList<>();

            for (Object[] row : dailyStatsRows) {
                Map<String, Object> dailyStat = new HashMap<>();
                dailyStat.put("date", row[0]);
                dailyStat.put("present", row[1]);
                dailyStat.put("absent", row[2]);
                dailyStat.put("late", row[3]);
                dailyStat.put("excused", row[4]);
                dailyStats.add(dailyStat);
            }

            stats.put("dailyStats", dailyStats);

            // Th·ªëng k√™ t·ªïng trong kho·∫£ng th·ªùi gian
            long totalPresent = diemDanhRepository.countByNgayDiemDanhBetweenAndTrangThai(
                    fromDate, toDate, TrangThaiDiemDanhEnum.CO_MAT);
            long totalAbsent = diemDanhRepository.countByNgayDiemDanhBetweenAndTrangThai(
                    fromDate, toDate, TrangThaiDiemDanhEnum.VANG_MAT);
            long totalLate = diemDanhRepository.countByNgayDiemDanhBetweenAndTrangThai(
                    fromDate, toDate, TrangThaiDiemDanhEnum.DI_TRE);

            stats.put("totalPresent", totalPresent);
            stats.put("totalAbsent", totalAbsent);
            stats.put("totalLate", totalLate);

        } catch (Exception e) {
            log.error("Error getting attendance statistics by date range", e);
            stats.put("dailyStats", new ArrayList<>());
            stats.put("totalPresent", 0L);
            stats.put("totalAbsent", 0L);
            stats.put("totalLate", 0L);
        }

        return stats;
    }

    /**
     * L·∫•y l·ªãch s·ª≠ ƒëi·ªÉm danh g·∫ßn nh·∫•t v·ªõi th√¥ng tin chi ti·∫øt
     */
    public List<Map<String, Object>> getRecentAttendanceHistory(int limit) {
        log.info("L·∫•y l·ªãch s·ª≠ ƒëi·ªÉm danh g·∫ßn nh·∫•t, limit: {}", limit);

        try {
            // FIXED: Handle Object[] results
            List<Object[]> results = diemDanhRepository.findRecentAttendanceHistory(limit);

            return results.stream().map(row -> {
                Map<String, Object> record = new HashMap<>();
                record.put("date", row[0]);
                record.put("subjectName", row[1]);
                record.put("subjectCode", row[2]);
                record.put("className", row[3]);
                record.put("lecturerName", row[4]);
                record.put("roomName", row[5]);
                record.put("session", row[6]);
                record.put("present", row[7]);
                record.put("absent", row[8]);
                record.put("late", row[9]);
                record.put("excused", row[10]);
                record.put("totalStudents", row[11]);
                return record;
            }).collect(Collectors.toList());

        } catch (Exception e) {
            log.error("Error getting recent attendance history", e);
            return new ArrayList<>();
        }
    }

    /**
     * L·∫•y b√°o c√°o ƒëi·ªÉm danh theo b·ªô l·ªçc
     */
    public List<Map<String, Object>> getFilteredAttendanceReport(
            LocalDate fromDate, LocalDate toDate,
            String subjectCode, String lecturerCode, String classCode) {
        log.info("L·∫•y b√°o c√°o ƒëi·ªÉm danh theo b·ªô l·ªçc: t·ª´ {} ƒë·∫øn {}, m√¥n {}, GV {}, l·ªõp {}",
                fromDate, toDate, subjectCode, lecturerCode, classCode);

        try {
            // FIXED: Handle Object[] results
            List<Object[]> results = diemDanhRepository.findFilteredAttendanceReport(
                    fromDate, toDate, subjectCode, lecturerCode, classCode);

            return results.stream().map(row -> {
                Map<String, Object> record = new HashMap<>();
                record.put("date", row[0]);
                record.put("subjectName", row[1]);
                record.put("subjectCode", row[2]);
                record.put("className", row[3]);
                record.put("lecturerName", row[4]);
                record.put("roomName", row[5]);
                record.put("session", row[6]);
                record.put("timeStart", row[7]);
                record.put("timeEnd", row[8]);
                record.put("present", row[9]);
                record.put("absent", row[10]);
                record.put("late", row[11]);
                record.put("excused", row[12]);
                record.put("totalStudents", row[13]);
                return record;
            }).collect(Collectors.toList());

        } catch (Exception e) {
            log.error("Error getting filtered attendance report", e);
            return new ArrayList<>();
        }
    }

    /**
     * Th·ªëng k√™ ƒëi·ªÉm danh theo h·ªçc k·ª≥
     */
    public Map<String, Object> getAttendanceStatisticsBySemester(String semesterCode, String yearCode) {
        log.info("L·∫•y th·ªëng k√™ ƒëi·ªÉm danh theo h·ªçc k·ª≥: {}, nƒÉm: {}", semesterCode, yearCode);

        Map<String, Object> stats = new HashMap<>();

        try {
            // FIXED: Handle Object[] results for subject stats
            List<Object[]> subjectStatsRows = diemDanhRepository.findAttendanceStatsBySubject(semesterCode, yearCode);
            List<Map<String, Object>> subjectStats = new ArrayList<>();

            for (Object[] row : subjectStatsRows) {
                Map<String, Object> subjectStat = new HashMap<>();
                subjectStat.put("subjectCode", row[0]);
                subjectStat.put("subjectName", row[1]);
                subjectStat.put("present", row[2]);
                subjectStat.put("absent", row[3]);
                subjectStat.put("late", row[4]);
                subjectStat.put("excused", row[5]);
                subjectStat.put("total", row[6]);
                subjectStats.add(subjectStat);
            }
            stats.put("subjectStats", subjectStats);

            // FIXED: Handle Object[] results for lecturer stats
            List<Object[]> lecturerStatsRows = diemDanhRepository.findAttendanceStatsByLecturer(semesterCode, yearCode);
            List<Map<String, Object>> lecturerStats = new ArrayList<>();

            for (Object[] row : lecturerStatsRows) {
                Map<String, Object> lecturerStat = new HashMap<>();
                lecturerStat.put("lecturerCode", row[0]);
                lecturerStat.put("lecturerName", row[1]);
                lecturerStat.put("present", row[2]);
                lecturerStat.put("absent", row[3]);
                lecturerStat.put("late", row[4]);
                lecturerStat.put("excused", row[5]);
                lecturerStat.put("total", row[6]);
                lecturerStats.add(lecturerStat);
            }
            stats.put("lecturerStats", lecturerStats);

            // FIXED: Handle Object[] results for class stats
            List<Object[]> classStatsRows = diemDanhRepository.findAttendanceStatsByClass(semesterCode, yearCode);
            List<Map<String, Object>> classStats = new ArrayList<>();

            for (Object[] row : classStatsRows) {
                Map<String, Object> classStat = new HashMap<>();
                classStat.put("classCode", row[0]);
                classStat.put("subjectName", row[1]);
                classStat.put("lecturerName", row[2]);
                classStat.put("present", row[3]);
                classStat.put("absent", row[4]);
                classStat.put("late", row[5]);
                classStat.put("excused", row[6]);
                classStat.put("total", row[7]);
                classStats.add(classStat);
            }
            stats.put("classStats", classStats);

        } catch (Exception e) {
            log.error("Error getting attendance statistics by semester", e);
            stats.put("subjectStats", new ArrayList<>());
            stats.put("lecturerStats", new ArrayList<>());
            stats.put("classStats", new ArrayList<>());
        }

        return stats;
    }
    /**
     * Xu·∫•t b√°o c√°o ƒëi·ªÉm danh ra Excel
     */
    public byte[] exportAttendanceReport(
            LocalDate fromDate, LocalDate toDate,
            String subjectCode, String lecturerCode, String classCode) {
        log.info("Xu·∫•t b√°o c√°o ƒëi·ªÉm danh ra Excel");

        List<Map<String, Object>> data = getFilteredAttendanceReport(
                fromDate, toDate, subjectCode, lecturerCode, classCode);

        return excelService.exportAttendanceReport(data, fromDate, toDate);
    }


    /**
     * L·∫•y ƒëi·ªÉm danh theo l·ªõp h·ªçc ph·∫ßn v√† ng√†y
     */
    public List<DiemDanhDTO> getByClassAndDate(String maLhp, LocalDate ngay) {
        List<DiemDanh> attendances = diemDanhRepository.findByLichHoc_LopHocPhan_MaLhpAndNgayDiemDanh(maLhp, ngay);
        return attendances.stream().map(this::toDTO).collect(Collectors.toList());
    }

    /**
     * T·∫°o ƒëi·ªÉm danh th·ªß c√¥ng cho nhi·ªÅu sinh vi√™n
     */
    @Transactional
    public List<DiemDanhDTO> createBulkManualAttendance(String maLich, LocalDate ngayDiemDanh,
                                                        List<ManualAttendanceRequest> requests) {
        log.info("T·∫°o ƒëi·ªÉm danh th·ªß c√¥ng cho l·ªãch {} ng√†y {}", maLich, ngayDiemDanh);

        // Ki·ªÉm tra l·ªãch h·ªçc t·ªìn t·∫°i
        LichHoc lichHoc = lichHocRepository.findById(maLich)
                .orElseThrow(() -> new ResourceNotFoundException("L·ªãch h·ªçc", "m√£ l·ªãch", maLich));

        List<DiemDanhDTO> results = new ArrayList<>();

        for (ManualAttendanceRequest request : requests) {
            try {
                // Ki·ªÉm tra xem ƒë√£ c√≥ ƒëi·ªÉm danh ch∆∞a
                List<DiemDanh> existing = diemDanhRepository.findByLichHocMaLichAndSinhVienMaSvAndNgayDiemDanh(
                        maLich, request.getMaSv(), ngayDiemDanh);

                DiemDanh diemDanh;
                if (!existing.isEmpty()) {
                    // C·∫≠p nh·∫≠t ƒëi·ªÉm danh hi·ªán c√≥
                    diemDanh = existing.get(0);
                    diemDanh.setTrangThai(request.getTrangThai());
                    diemDanh.setThoiGianVao(request.getThoiGianVao());
                    diemDanh.setThoiGianRa(request.getThoiGianRa());
                } else {
                    // T·∫°o m·ªõi ƒëi·ªÉm danh
                    DiemDanhDTO dto = DiemDanhDTO.builder()
                            .maLich(maLich)
                            .maSv(request.getMaSv())
                            .ngayDiemDanh(ngayDiemDanh)
                            .trangThai(request.getTrangThai())
                            .thoiGianVao(request.getThoiGianVao())
                            .thoiGianRa(request.getThoiGianRa())
                            .build();

                    diemDanh = toEntity(dto);
                }

                results.add(toDTO(diemDanhRepository.save(diemDanh)));

            } catch (Exception e) {
                log.error("L·ªói t·∫°o ƒëi·ªÉm danh cho sinh vi√™n {}: {}", request.getMaSv(), e.getMessage());
            }
        }

        return results;
    }

    /**
     * T√≠nh t·ª∑ l·ªá ƒëi·ªÉm danh theo l·ªõp h·ªçc ph·∫ßn
     */
    public AttendanceStatsDTO getAttendanceStatsByClass(String maLhp) {
        log.info("T√≠nh t·ª∑ l·ªá ƒëi·ªÉm danh cho l·ªõp {}", maLhp);

        // ƒê·∫øm t·ªïng s·ªë bu·ªïi h·ªçc
        long totalSessions = lichHocRepository.countByLopHocPhanMaLhp(maLhp);

        // ƒê·∫øm t·ªïng s·ªë sinh vi√™n ƒëƒÉng k√Ω
        long totalStudents = dangKyHocRepository.countByLopHocPhanMaLhp(maLhp);

        // ƒê·∫øm ƒëi·ªÉm danh theo tr·∫°ng th√°i
        long presentCount = diemDanhRepository.countByLichHoc_LopHocPhan_MaLhpAndTrangThai(
                maLhp, TrangThaiDiemDanhEnum.CO_MAT);
        long absentCount = diemDanhRepository.countByLichHoc_LopHocPhan_MaLhpAndTrangThai(
                maLhp, TrangThaiDiemDanhEnum.VANG_MAT);
        long lateCount = diemDanhRepository.countByLichHoc_LopHocPhan_MaLhpAndTrangThai(
                maLhp, TrangThaiDiemDanhEnum.DI_TRE);
        long excusedCount = diemDanhRepository.countByLichHoc_LopHocPhan_MaLhpAndTrangThai(
                maLhp, TrangThaiDiemDanhEnum.VANG_CO_PHEP);

        long totalAttendanceRecords = presentCount + absentCount + lateCount + excusedCount;

        double attendanceRate = totalAttendanceRecords > 0 ?
                (double) (presentCount + lateCount) / totalAttendanceRecords * 100 : 0;

        return AttendanceStatsDTO.builder()
                .totalSessions(totalSessions)
                .totalStudents(totalStudents)
                .presentCount(presentCount)
                .absentCount(absentCount)
                .lateCount(lateCount)
                .excusedCount(excusedCount)
                .attendanceRate(attendanceRate)
                .build();
    }

    /**
     * L·∫•y t·ª∑ l·ªá ƒëi·ªÉm danh c·ªßa t·ª´ng sinh vi√™n trong l·ªõp
     */
    public List<StudentAttendanceDTO> getStudentAttendanceByClass(String maLhp) {
        // L·∫•y danh s√°ch sinh vi√™n ƒëƒÉng k√Ω l·ªõp
        List<DangKyHocDTO> registrations = dangKyHocService.getByMaLhp(maLhp);

        return registrations.stream().map(reg -> {
            String maSv = reg.getMaSv();

            // ƒê·∫øm ƒëi·ªÉm danh theo tr·∫°ng th√°i cho sinh vi√™n n√†y
            long presentCount = diemDanhRepository.countBySinhVienMaSvAndLichHoc_LopHocPhan_MaLhpAndTrangThai(
                    maSv, maLhp, TrangThaiDiemDanhEnum.CO_MAT);
            long absentCount = diemDanhRepository.countBySinhVienMaSvAndLichHoc_LopHocPhan_MaLhpAndTrangThai(
                    maSv, maLhp, TrangThaiDiemDanhEnum.VANG_MAT);
            long lateCount = diemDanhRepository.countBySinhVienMaSvAndLichHoc_LopHocPhan_MaLhpAndTrangThai(
                    maSv, maLhp, TrangThaiDiemDanhEnum.DI_TRE);
            long excusedCount = diemDanhRepository.countBySinhVienMaSvAndLichHoc_LopHocPhan_MaLhpAndTrangThai(
                    maSv, maLhp, TrangThaiDiemDanhEnum.VANG_CO_PHEP);

            long total = presentCount + absentCount + lateCount + excusedCount;
            double attendanceRate = total > 0 ? (double) (presentCount + lateCount) / total * 100 : 0;

            return StudentAttendanceDTO.builder()
                    .maSv(maSv)
                    .presentCount(presentCount)
                    .absentCount(absentCount)
                    .lateCount(lateCount)
                    .excusedCount(excusedCount)
                    .attendanceRate(attendanceRate)
                    .build();
        }).collect(Collectors.toList());
    }

    public long countTodayDiemDanh() {
        return diemDanhRepository.countByNgayDiemDanh(LocalDate.now());
    }
    // Th√™m v√†o DiemDanhService.java

    public List<DiemDanhDTO> getByMaLichAndDate(String maLich, LocalDate ngayDiemDanh) {
        List<DiemDanh> attendances = diemDanhRepository.findByLichHocMaLichAndNgayDiemDanh(maLich, ngayDiemDanh);
        return attendances.stream().map(this::toDTO).collect(Collectors.toList());
    }

    /**
     * L·∫•y ƒëi·ªÉm danh theo m√£ l·ªãch v√† m√£ sinh vi√™n
     */
    public List<DiemDanhDTO> getByMaLichAndMaSv(String maLich, String maSv) {
        try {
            List<DiemDanh> diemDanhList = diemDanhRepository.findByLichHocMaLichAndSinhVienMaSv(maLich, maSv);
            return diemDanhList.stream()
                    .map(this::toDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            log.error("Error getting attendance by schedule and student: {}", e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * L·∫•y ƒëi·ªÉm danh theo sinh vi√™n v√† kho·∫£ng th·ªùi gian
     */
    public List<DiemDanhDTO> getByMaSvAndDateRange(String maSv, LocalDate fromDate, LocalDate toDate) {
        try {
            List<DiemDanh> diemDanhList = diemDanhRepository.findBySinhVienMaSvAndNgayDiemDanhBetween(
                    maSv, fromDate, toDate);
            return diemDanhList.stream()
                    .map(this::toDTO)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            log.error("Error getting attendance by student and date range: {}", e.getMessage());
            return new ArrayList<>();
        }
    }
    /**
     * ƒê·∫øm s·ªë l∆∞·ª£ng ƒëi·ªÉm danh theo m√£ l·ªãch
     */
    public long countByMaLich(String maLich) {
        try {
            return diemDanhRepository.countByLichHocMaLich(maLich);
        } catch (Exception e) {
            log.error("Error counting attendance by schedule: {}", e.getMessage());
            return 0;
        }
    }
    // Th√™m v√†o DiemDanhService.java

    /**
     * L·∫•y ƒëi·ªÉm danh theo l·ªõp h·ªçc ph·∫ßn v√† kho·∫£ng th·ªùi gian
     * @param maLhp M√£ l·ªõp h·ªçc ph·∫ßn
     * @param fromDate T·ª´ ng√†y (nullable)
     * @param toDate ƒê·∫øn ng√†y (nullable)
     * @return Danh s√°ch ƒëi·ªÉm danh
     */
    public List<DiemDanhDTO> getByLopHocPhanAndDateRange(String maLhp, LocalDate fromDate, LocalDate toDate) {
        log.info("Getting attendance for class {} from {} to {}", maLhp, fromDate, toDate);

        try {
            // L·∫•y t·∫•t c·∫£ l·ªãch h·ªçc c·ªßa l·ªõp h·ªçc ph·∫ßn n√†y th√¥ng qua LichHocService
            List<LichHocDTO> lichHocList = lichHocService.getByLopHocPhan(maLhp);

            if (lichHocList.isEmpty()) {
                log.warn("No schedule found for class {}", maLhp);
                return new ArrayList<>();
            }

            // L·∫•y c√°c m√£ l·ªãch h·ªçc
            List<String> maLichList = lichHocList.stream()
                    .map(LichHocDTO::getMaLich)
                    .collect(Collectors.toList());

            // L·∫•y ƒëi·ªÉm danh theo danh s√°ch m√£ l·ªãch v√† filter theo kho·∫£ng th·ªùi gian
            List<DiemDanhDTO> allAttendance = new ArrayList<>();

            for (String maLich : maLichList) {
                List<DiemDanhDTO> scheduleAttendance = getByMaLich(maLich)
                        .stream()
                        .filter(dd -> {
                            LocalDate attendanceDate = dd.getNgayDiemDanh();
                            if (fromDate != null && attendanceDate.isBefore(fromDate)) {
                                return false;
                            }
                            if (toDate != null && attendanceDate.isAfter(toDate)) {
                                return false;
                            }
                            return true;
                        })
                        .collect(Collectors.toList());
                allAttendance.addAll(scheduleAttendance);
            }

            return allAttendance;

        } catch (Exception e) {
            log.error("Error getting attendance for class {} in date range: {}", maLhp, e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * L·∫•y ƒëi·ªÉm danh h√¥m nay theo l·ªõp h·ªçc ph·∫ßn
     * @param maLhp M√£ l·ªõp h·ªçc ph·∫ßn
     * @return Danh s√°ch ƒëi·ªÉm danh h√¥m nay
     */
    public List<DiemDanhDTO> getTodayAttendanceByClass(String maLhp) {
        LocalDate today = LocalDate.now();
        return getByLopHocPhanAndDateRange(maLhp, today, today);
    }

    /**
     * Th·ªëng k√™ ƒëi·ªÉm danh theo l·ªõp h·ªçc ph·∫ßn
     * @param maLhp M√£ l·ªõp h·ªçc ph·∫ßn
     * @param fromDate T·ª´ ng√†y (nullable)
     * @param toDate ƒê·∫øn ng√†y (nullable)
     * @return Map ch·ª©a th·ªëng k√™
     */
    public Map<String, Object> getAttendanceStatsByClass(String maLhp, LocalDate fromDate, LocalDate toDate) {
        Map<String, Object> stats = new HashMap<>();

        try {
            List<DiemDanhDTO> attendanceList = getByLopHocPhanAndDateRange(maLhp, fromDate, toDate);

            if (attendanceList.isEmpty()) {
                // Tr·∫£ v·ªÅ stats r·ªóng
                stats.put("totalRecords", 0);
                stats.put("presentCount", 0);
                stats.put("absentCount", 0);
                stats.put("lateCount", 0);
                stats.put("excusedCount", 0);
                stats.put("attendanceRate", 0.0);
                return stats;
            }

            // ƒê·∫øm c√°c lo·∫°i ƒëi·ªÉm danh
            long totalRecords = attendanceList.size();
            long presentCount = attendanceList.stream().filter(dd -> TrangThaiDiemDanhEnum.CO_MAT.equals(dd.getTrangThai())).count();
            long absentCount = attendanceList.stream().filter(dd -> TrangThaiDiemDanhEnum.VANG_MAT.equals(dd.getTrangThai())).count();
            long lateCount = attendanceList.stream().filter(dd -> TrangThaiDiemDanhEnum.DI_TRE.equals(dd.getTrangThai())).count();
            long excusedCount = attendanceList.stream().filter(dd -> TrangThaiDiemDanhEnum.VANG_CO_PHEP.equals(dd.getTrangThai())).count();

            // T√≠nh t·ª∑ l·ªá
            double attendanceRate = totalRecords > 0 ? (double) presentCount / totalRecords * 100 : 0;

            stats.put("totalRecords", totalRecords);
            stats.put("presentCount", presentCount);
            stats.put("absentCount", absentCount);
            stats.put("lateCount", lateCount);
            stats.put("excusedCount", excusedCount);
            stats.put("attendanceRate", attendanceRate);

        } catch (Exception e) {
            log.error("Error getting attendance stats for class: {}", e.getMessage());
        }

        return stats;
    }

    /**
     * L·∫•y th·ªëng k√™ ƒëi·ªÉm danh theo sinh vi√™n trong m·ªôt l·ªõp
     * @param maLhp M√£ l·ªõp h·ªçc ph·∫ßn
     * @return Danh s√°ch th·ªëng k√™ t·ª´ng sinh vi√™n
     */
    public List<Map<String, Object>> getAttendanceStatsByStudents(String maLhp) {
        List<Map<String, Object>> result = new ArrayList<>();

        try {
            // L·∫•y danh s√°ch sinh vi√™n trong l·ªõp
            List<DangKyHocDTO> dangKyList = dangKyHocService.getByMaLhp(maLhp);

            for (DangKyHocDTO dangKy : dangKyList) {
                SinhVienDTO sinhVien = sinhVienService.getByMaSv(dangKy.getMaSv());
                if (sinhVien == null) continue;

                // L·∫•y t·∫•t c·∫£ ƒëi·ªÉm danh c·ªßa sinh vi√™n n√†y trong l·ªõp
                List<DiemDanhDTO> studentAttendance = getStudentAttendanceInClass(sinhVien.getMaSv(), maLhp);

                if (!studentAttendance.isEmpty()) {
                    long presentCount = studentAttendance.stream()
                            .filter(dd -> TrangThaiDiemDanhEnum.CO_MAT.equals(dd.getTrangThai()))
                            .count();

                    long absentCount = studentAttendance.stream()
                            .filter(dd -> TrangThaiDiemDanhEnum.VANG_MAT.equals(dd.getTrangThai()))
                            .count();

                    long lateCount = studentAttendance.stream()
                            .filter(dd -> TrangThaiDiemDanhEnum.DI_TRE.equals(dd.getTrangThai()))
                            .count();

                    long excusedCount = studentAttendance.stream()
                            .filter(dd -> TrangThaiDiemDanhEnum.VANG_CO_PHEP.equals(dd.getTrangThai()))
                            .count();

                    double attendanceRate = (double) (presentCount + lateCount) / studentAttendance.size() * 100;

                    Map<String, Object> studentStat = new HashMap<>();
                    studentStat.put("maSv", sinhVien.getMaSv());
                    studentStat.put("hoTen", sinhVien.getHoTen());
                    studentStat.put("totalSessions", studentAttendance.size());
                    studentStat.put("presentCount", presentCount);
                    studentStat.put("absentCount", absentCount);
                    studentStat.put("lateCount", lateCount);
                    studentStat.put("excusedCount", excusedCount);
                    studentStat.put("attendanceRate", attendanceRate);

                    result.add(studentStat);
                }
            }

            // S·∫Øp x·∫øp theo t·ª∑ l·ªá ƒëi·ªÉm danh gi·∫£m d·∫ßn
            result.sort((a, b) -> Double.compare(
                    (Double) b.get("attendanceRate"),
                    (Double) a.get("attendanceRate")
            ));

        } catch (Exception e) {
            log.error("Error getting student attendance stats: {}", e.getMessage());
        }

        return result;
    }

    /**
     * L·∫•y ƒëi·ªÉm danh c·ªßa sinh vi√™n trong m·ªôt l·ªõp c·ª• th·ªÉ
     */
    private List<DiemDanhDTO> getStudentAttendanceInClass(String maSv, String maLhp) {
        try {
            // L·∫•y t·∫•t c·∫£ l·ªãch h·ªçc c·ªßa l·ªõp
            List<LichHocDTO> lichHocList = lichHocService.getByLopHocPhan(maLhp);
            List<DiemDanhDTO> allAttendance = new ArrayList<>();

            for (LichHocDTO lichHoc : lichHocList) {
                List<DiemDanhDTO> sessionAttendance = getByMaLich(lichHoc.getMaLich())
                        .stream()
                        .filter(dd -> maSv.equals(dd.getMaSv()))
                        .collect(Collectors.toList());
                allAttendance.addAll(sessionAttendance);
            }

            return allAttendance;
        } catch (Exception e) {
            log.error("Error getting student attendance in class: {}", e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * T·∫°o b√°o c√°o xu h∆∞·ªõng ƒëi·ªÉm danh theo th·ªùi gian
     */
    public List<Map<String, Object>> getAttendanceTrend(String maLhp, LocalDate fromDate, LocalDate toDate) {
        List<Map<String, Object>> trend = new ArrayList<>();

        try {
            // L·∫•y ƒëi·ªÉm danh theo t·ª´ng ng√†y
            List<DiemDanhDTO> attendanceList = getByLopHocPhanAndDateRange(maLhp, fromDate, toDate);

            // Group by date
            Map<LocalDate, List<DiemDanhDTO>> attendanceByDate = attendanceList.stream()
                    .collect(Collectors.groupingBy(DiemDanhDTO::getNgayDiemDanh));

            // T·∫°o trend data
            for (Map.Entry<LocalDate, List<DiemDanhDTO>> entry : attendanceByDate.entrySet()) {
                LocalDate date = entry.getKey();
                List<DiemDanhDTO> dailyAttendance = entry.getValue();

                long presentCount = dailyAttendance.stream()
                        .filter(dd -> TrangThaiDiemDanhEnum.CO_MAT.equals(dd.getTrangThai()))
                        .count();

                long totalCount = dailyAttendance.size();
                double rate = totalCount > 0 ? (double) presentCount / totalCount * 100 : 0;

                Map<String, Object> dailyTrend = new HashMap<>();
                dailyTrend.put("date", date.toString());
                dailyTrend.put("totalStudents", totalCount);
                dailyTrend.put("presentCount", presentCount);
                dailyTrend.put("attendanceRate", rate);

                trend.add(dailyTrend);
            }

            // S·∫Øp x·∫øp theo ng√†y
            trend.sort((a, b) -> ((String) a.get("date")).compareTo((String) b.get("date")));

        } catch (Exception e) {
            log.error("Error getting attendance trend: {}", e.getMessage());
        }

        return trend;
    }

    /**
     * L·∫•y top h·ªçc sinh c√≥ t·ª∑ l·ªá ƒëi·ªÉm danh cao nh·∫•t
     */
    public List<Map<String, Object>> getTopAttendanceStudents(String maLhp, int limit) {
        List<Map<String, Object>> result = new ArrayList<>();

        try {
            // S·ª≠ d·ª•ng method getAttendanceStatsByStudents ƒë√£ c√≥
            result = getAttendanceStatsByStudents(maLhp);

            // L·∫•y top students
            return result.stream().limit(limit).collect(Collectors.toList());

        } catch (Exception e) {
            log.error("Error getting top attendance students: {}", e.getMessage());
            return result;
        }
    }
    public List<DiemDanhDTO> getByLichHocAndDate(String maLich, LocalDate date) {
        log.info("Getting attendance for schedule {} on date {}", maLich, date);

        try {
            List<DiemDanh> attendances = diemDanhRepository.findByLichHocMaLichAndNgayDiemDanh(maLich, date);

            return attendances.stream()
                    .map(this::toDTO)
                    .collect(Collectors.toList());

        } catch (Exception e) {
            log.error("Error getting attendance for schedule {} on date {}: ", maLich, date, e);
            return new ArrayList<>();
        }
    }

    private static final Map<Integer, LocalTime> PERIOD_START_TIMES = Map.ofEntries(
            // Bu·ªïi s√°ng
            Map.entry(1, LocalTime.of(7, 0)),   // 07:00
            Map.entry(2, LocalTime.of(7, 50)),  // 07:50
            Map.entry(3, LocalTime.of(8, 50)),  // 08:50
            Map.entry(4, LocalTime.of(9, 50)),  // 09:50
            Map.entry(5, LocalTime.of(10, 40)), // 10:40

            // Bu·ªïi chi·ªÅu
            Map.entry(6, LocalTime.of(13, 0)),  // 13:00
            Map.entry(7, LocalTime.of(13, 50)), // 13:50
            Map.entry(8, LocalTime.of(14, 50)), // 14:50
            Map.entry(9, LocalTime.of(15, 50)), // 15:50
            Map.entry(10, LocalTime.of(16, 40)), // 16:40

            // Bu·ªïi t·ªëi
            Map.entry(11, LocalTime.of(18, 15)), // 18:15
            Map.entry(12, LocalTime.of(19, 5)),  // 19:05
            Map.entry(13, LocalTime.of(20, 5))   // 20:05
    );

    /**
     * T√≠nh th·ªùi gian b·∫Øt ƒë·∫ßu d·ª±a tr√™n ti·∫øt h·ªçc
     * C≈®: Ti·∫øt 1 = 7:00, m·ªói ti·∫øt 45 ph√∫t + ngh·ªâ 5 ph√∫t
     * M·ªöI: Th·ªùi gian ch√≠nh x√°c theo l·ªãch tr∆∞·ªùng
     */
    private LocalTime calculateStartTime(int tietBatDau) {
        LocalTime startTime = PERIOD_START_TIMES.get(tietBatDau);
        if (startTime == null) {
            // Fallback v·ªÅ logic c≈© n·∫øu ti·∫øt kh√¥ng h·ª£p l·ªá (an to√†n 100%)
            log.warn("‚ö†Ô∏è Ti·∫øt {} kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng c√¥ng th·ª©c c≈©", tietBatDau);
            return LocalTime.of(7, 0).plusMinutes((tietBatDau - 1) * 50);
        }
        return startTime;
    }

    /**
     * T√≠nh th·ªùi gian k·∫øt th√∫c d·ª±a tr√™n ti·∫øt b·∫Øt ƒë·∫ßu v√† s·ªë ti·∫øt
     * M·ªñI TI·∫æT = 50 PH√öT (kh√¥ng ƒë·ªïi)
     */
    private LocalTime calculateEndTime(int tietBatDau, int soTiet) {
        LocalTime startTime = calculateStartTime(tietBatDau);
        return startTime.plusMinutes(soTiet * 50); // 50 ph√∫t/ti·∫øt gi·ªØ nguy√™n
    }
// ===== TH√äM METHOD DEPRECATED CHO T∆Ø∆†NG TH√çCH NG∆Ø·ª¢C =====

    /**
     * @deprecated S·ª≠ d·ª•ng isTimeInScheduleWithBuffer thay th·∫ø
     */
    @Deprecated
    private boolean isTimeInSchedule(LichHoc lichHoc, LocalTime currentTime) {
        log.warn("‚ö†Ô∏è S·ª≠ d·ª•ng method deprecated isTimeInSchedule, n√™n chuy·ªÉn sang isTimeInScheduleWithBuffer");
        return isTimeInScheduleWithBuffer(lichHoc, currentTime);
    }

// ===== TH√äM METHOD C·∫§U H√åNH TH·ªúI GIAN BUFFER =====

    /**
     * T·∫°o l·ªãch h·ªçc v·ªõi th·ªùi gian buffer t√πy ch·ªânh (cho admin config)
     */
    private boolean isTimeInScheduleWithCustomBuffer(LichHoc lichHoc, LocalTime currentTime,
                                                     int beforeMinutes, int afterMinutes) {
        LocalTime startTime = calculateStartTime(lichHoc.getTietBatDau());
        LocalTime endTime = calculateEndTime(lichHoc.getTietBatDau(), lichHoc.getSoTiet());

        LocalTime allowedStartTime = startTime.minusMinutes(beforeMinutes);
        LocalTime allowedEndTime = endTime.plusMinutes(afterMinutes);

        return !currentTime.isBefore(allowedStartTime) && !currentTime.isAfter(allowedEndTime);
    }

// ===== TH√äM METHOD L·∫§Y TH√îNG TIN DEBUG =====

    /**
     * L·∫•y th√¥ng tin debug v·ªÅ l·ªãch h·ªçc t·∫°i ph√≤ng (ƒë·ªÉ troubleshooting)
     */
    public Map<String, Object> getScheduleDebugInfo(String maPhong) {
        LocalDate today = LocalDate.now();
        LocalTime now = LocalTime.now();
        int dayOfWeek = today.getDayOfWeek().getValue();

        List<LichHoc> schedules = lichHocRepository
                .findByPhongHocMaPhongAndThuAndIsActiveTrue(maPhong, dayOfWeek);

        Map<String, Object> debugInfo = new HashMap<>();
        debugInfo.put("currentTime", now.toString());
        debugInfo.put("currentDate", today.toString());
        debugInfo.put("dayOfWeek", dayOfWeek);
        debugInfo.put("roomCode", maPhong);
        debugInfo.put("totalSchedules", schedules.size());
        debugInfo.put("bufferBefore", ATTENDANCE_BEFORE_CLASS_MINUTES + " ph√∫t");
        debugInfo.put("bufferAfter", ATTENDANCE_AFTER_CLASS_MINUTES + " ph√∫t");

        List<Map<String, Object>> scheduleDetails = new ArrayList<>();
        for (LichHoc lichHoc : schedules) {
            LocalTime startTime = calculateStartTime(lichHoc.getTietBatDau());
            LocalTime endTime = calculateEndTime(lichHoc.getTietBatDau(), lichHoc.getSoTiet());
            LocalTime bufferStart = startTime.minusMinutes(ATTENDANCE_BEFORE_CLASS_MINUTES);
            LocalTime bufferEnd = endTime.plusMinutes(ATTENDANCE_AFTER_CLASS_MINUTES);

            Map<String, Object> detail = new HashMap<>();
            detail.put("scheduleCode", lichHoc.getMaLich());
            detail.put("period", "Ti·∫øt " + lichHoc.getTietBatDau() + "-" + (lichHoc.getTietBatDau() + lichHoc.getSoTiet() - 1));
            detail.put("originalTime", startTime + " ~ " + endTime);
            detail.put("allowedTime", bufferStart + " ~ " + bufferEnd);
            detail.put("isCurrentlyValid", isTimeInScheduleWithBuffer(lichHoc, now));
            detail.put("className", lichHoc.getLopHocPhan() != null ? lichHoc.getLopHocPhan().getMaLhp() : "N/A");

            scheduleDetails.add(detail);
        }
        debugInfo.put("schedules", scheduleDetails);

        return debugInfo;
    }

    /**
     * Xu·∫•t b√°o c√°o c·∫£ h·ªçc k·ª≥
     */
    public byte[] exportSemesterReport(String semesterCode, String yearCode, String lecturerCode, String classCode) {
        try {
            // L·∫•y kho·∫£ng th·ªùi gian h·ªçc k·ª≥
            Map<String, Object> semesterInfo = getSemesterDateRange(semesterCode, yearCode);
            LocalDate startDate = (LocalDate) semesterInfo.get("startDate");
            LocalDate endDate = (LocalDate) semesterInfo.get("endDate");

            // L·∫•y t·∫•t c·∫£ l·ªãch h·ªçc trong h·ªçc k·ª≥
            List<LichHoc> schedules = lichHocRepository.findBySemesterAndYear(semesterCode, yearCode);

            if (lecturerCode != null) {
                schedules = schedules.stream()
                        .filter(s -> lecturerCode.equals(s.getLopHocPhan().getGiangVien().getMaGv()))
                        .collect(Collectors.toList());
            }

            if (classCode != null) {
                schedules = schedules.stream()
                        .filter(s -> classCode.equals(s.getLopHocPhan().getMaLhp()))
                        .collect(Collectors.toList());
            }

            // T√≠nh to√°n s·ªë bu·ªïi h·ªçc v√† ƒëi·ªÉm danh
            List<SemesterReportData> reportData = new ArrayList<>();

            for (LichHoc schedule : schedules) {
                SemesterReportData data = calculateSemesterAttendance(schedule, startDate, endDate);
                reportData.add(data);
            }

            // Export ra Excel
            return excelService.createSemesterReport(reportData, semesterCode, yearCode);

        } catch (Exception e) {
            log.error("Error creating semester report: {}", e.getMessage(), e);
            throw new BusinessException("Kh√¥ng th·ªÉ t·∫°o b√°o c√°o h·ªçc k·ª≥: ", e.getMessage());
        }
    }

    /**
     * L·∫•y kho·∫£ng th·ªùi gian c·ªßa h·ªçc k·ª≥ t·ª´ b·∫£ng hoc_ky
     */
    public Map<String, Object> getSemesterDateRange(String semesterCode, String yearCode) {
        try {
            // L·∫•y ng√†y t·ª´ b·∫£ng hoc_ky thay v√¨ t√≠nh to√°n
            LocalDate startDate = lichHocRepository.findEarliestDateBySemester(semesterCode, yearCode);
            LocalDate endDate = lichHocRepository.findLatestDateBySemester(semesterCode, yearCode);

            if (startDate == null || endDate == null) {
                // Fallback: t√≠nh to√°n ng√†y d·ª±a tr√™n logic c≈©
                startDate = calculateSemesterStartDate(semesterCode, yearCode);
                endDate = calculateSemesterEndDate(semesterCode, yearCode);
            }

            // T√≠nh s·ªë tu·∫ßn h·ªçc
            long totalWeeks = ChronoUnit.WEEKS.between(startDate, endDate) + 1;

            Map<String, Object> info = new HashMap<>();
            info.put("startDate", startDate);
            info.put("endDate", endDate);
            info.put("totalWeeks", totalWeeks);
            info.put("semesterCode", semesterCode);
            info.put("yearCode", yearCode);

            return info;

        } catch (Exception e) {
            log.error("Error getting semester date range: {}", e.getMessage(), e);
            throw new BusinessException("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªçc k·ª≥: ", e.getMessage());
        }
    }

    // Helper methods ƒë·ªÉ t√≠nh ng√†y fallback
    private LocalDate calculateSemesterStartDate(String semesterCode, String yearCode) {
        int year = Integer.parseInt(yearCode);
        switch (semesterCode) {
            case "1": return LocalDate.of(year, 8, 15);      // H·ªçc k·ª≥ 1: 15/8
            case "2": return LocalDate.of(year + 1, 1, 15);  // H·ªçc k·ª≥ 2: 15/1 nƒÉm sau
            case "3": return LocalDate.of(year + 1, 6, 1);   // H·ªçc k·ª≥ h√®: 1/6 nƒÉm sau
            default: return LocalDate.of(year, 8, 15);
        }
    }

    private LocalDate calculateSemesterEndDate(String semesterCode, String yearCode) {
        int year = Integer.parseInt(yearCode);
        switch (semesterCode) {
            case "1": return LocalDate.of(year, 12, 31);     // H·ªçc k·ª≥ 1: 31/12
            case "2": return LocalDate.of(year + 1, 5, 31);  // H·ªçc k·ª≥ 2: 31/5 nƒÉm sau
            case "3": return LocalDate.of(year + 1, 8, 31);  // H·ªçc k·ª≥ h√®: 31/8 nƒÉm sau
            default: return LocalDate.of(year, 12, 31);
        }
    }

    /**
     * T√≠nh to√°n ƒëi·ªÉm danh cho 1 l·ªõp trong c·∫£ h·ªçc k·ª≥
     */
    private SemesterReportData calculateSemesterAttendance(LichHoc schedule, LocalDate startDate, LocalDate endDate) {
        String maLhp = schedule.getLopHocPhan().getMaLhp();

        // ƒê·∫øm t·ªïng s·ªë bu·ªïi h·ªçc theo l·ªãch
        int totalSessions = countTotalSessions(schedule, startDate, endDate);

        // L·∫•y t·∫•t c·∫£ ƒëi·ªÉm danh c·ªßa l·ªõp trong k·ª≥
        List<DiemDanh> attendances = diemDanhRepository.findByClassAndDateRange(maLhp, startDate, endDate);

        // L·∫•y danh s√°ch sinh vi√™n
        List<SinhVien> students = dangKyHocRepository.findStudentsByClass(maLhp);

        List<StudentSemesterData> studentData = new ArrayList<>();

        for (SinhVien student : students) {
            List<DiemDanh> studentAttendances = attendances.stream()
                    .filter(a -> student.getMaSv().equals(a.getSinhVien().getMaSv()))
                    .collect(Collectors.toList());

            int presentCount = (int) studentAttendances.stream()
                    .filter(a -> a.getTrangThai() == TrangThaiDiemDanhEnum.CO_MAT)
                    .count();

            int lateCount = (int) studentAttendances.stream()
                    .filter(a -> a.getTrangThai() == TrangThaiDiemDanhEnum.DI_TRE)
                    .count();

            int absentCount = totalSessions - presentCount - lateCount;

            double attendanceRate = totalSessions > 0 ?
                    (double)(presentCount + lateCount) / totalSessions * 100 : 0;

            StudentSemesterData data = StudentSemesterData.builder()
                    .maSv(student.getMaSv())
                    .hoTen(student.getHoTen())
                    .totalSessions(totalSessions)
                    .presentCount(presentCount)
                    .lateCount(lateCount)
                    .absentCount(absentCount)
                    .attendanceRate(attendanceRate)
                    .build();

            studentData.add(data);
        }

        return SemesterReportData.builder()
                .maLhp(maLhp)
                .tenMonHoc(schedule.getLopHocPhan().getMonHoc().getTenMh())
                .tenGiangVien(schedule.getLopHocPhan().getGiangVien().getHoTen())
                .totalSessions(totalSessions)
                .studentData(studentData)
                .build();
    }

    /**
     * ƒê·∫øm s·ªë bu·ªïi h·ªçc th·ª±c t·∫ø theo l·ªãch
     */
    private int countTotalSessions(LichHoc schedule, LocalDate startDate, LocalDate endDate) {
        int count = 0;
        LocalDate current = startDate;
        int dayOfWeek = schedule.getThu(); // 2=th·ª© 2, 3=th·ª© 3,...

        while (!current.isAfter(endDate)) {
            if (current.getDayOfWeek().getValue() == dayOfWeek) {
                count++;
            }
            current = current.plusDays(1);
        }

        return count;
    }
}

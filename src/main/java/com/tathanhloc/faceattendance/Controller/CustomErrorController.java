package com.tathanhloc.faceattendance.Controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * üîß Custom Error Controller - Thay th·∫ø cho Spring Boot BasicErrorController
 * ‚úÖ X·ª≠ l√Ω c·∫£ API errors (JSON) v√† Web errors (HTML)
 */
@Controller
@Slf4j
public class CustomErrorController implements ErrorController {

    @RequestMapping("/error")
    public Object handleError(HttpServletRequest request, Model model) {
        // L·∫•y th√¥ng tin l·ªói
        Object status = request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
        String requestURI = (String) request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI);
        String errorMessage = (String) request.getAttribute(RequestDispatcher.ERROR_MESSAGE);
        Throwable exception = (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);

        Integer statusCode = status != null ? Integer.valueOf(status.toString()) : 500;

        log.error("üö® Custom Error Handler - Status: {} | Path: {} | Message: {}",
                statusCode, requestURI, errorMessage);

        if (exception != null) {
            log.error("Exception details: ", exception);
        }

        // Ki·ªÉm tra lo·∫°i request
        if (isApiRequest(request)) {
            log.info("üì± Handling as API request");
            return handleApiError(request, statusCode, requestURI, errorMessage);
        } else {
            log.info("üåê Handling as Web request");
            return handleWebError(statusCode, requestURI, model);
        }
    }

    /**
     * üì± X·ª≠ l√Ω API errors - Tr·∫£ v·ªÅ JSON
     */
    private ResponseEntity<Map<String, Object>> handleApiError(HttpServletRequest request,
                                                               Integer statusCode,
                                                               String requestURI,
                                                               String errorMessage) {
        Map<String, Object> errorResponse = new HashMap<>();

        // Th√¥ng tin c∆° b·∫£n
        errorResponse.put("timestamp", LocalDateTime.now().toString());
        errorResponse.put("status", statusCode);
        errorResponse.put("path", requestURI);
        errorResponse.put("method", request.getMethod());

        // Th√¥ng ƒëi·ªáp l·ªói theo m√£ l·ªói
        switch (statusCode) {
            case 400:
                errorResponse.put("error", "Bad Request");
                errorResponse.put("message", "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá");
                break;
            case 401:
                errorResponse.put("error", "Unauthorized");
                errorResponse.put("message", "Ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p.");
                break;
            case 403:
                errorResponse.put("error", "Forbidden");
                errorResponse.put("message", "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y");
                break;
            case 404:
                errorResponse.put("error", "Not Found");
                errorResponse.put("message", "API endpoint kh√¥ng t·ªìn t·∫°i: " + request.getMethod() + " " + requestURI);
                break;
            case 405:
                errorResponse.put("error", "Method Not Allowed");
                errorResponse.put("message", "Ph∆∞∆°ng th·ª©c " + request.getMethod() + " kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£");
                break;
            case 500:
                errorResponse.put("error", "Internal Server Error");
                errorResponse.put("message", "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.");
                break;
            default:
                errorResponse.put("error", "Error");
                errorResponse.put("message", "ƒê√£ x·∫£y ra l·ªói: " + statusCode);
        }

        // Th√™m debug info trong development
        String profile = System.getProperty("spring.profiles.active", "dev");
        if ("dev".equals(profile) || "development".equals(profile)) {
            Map<String, Object> debug = new HashMap<>();
            debug.put("userAgent", request.getHeader("User-Agent"));
            debug.put("remoteAddr", request.getRemoteAddr());
            debug.put("originalMessage", errorMessage);
            debug.put("acceptHeader", request.getHeader("Accept"));
            debug.put("contentType", request.getHeader("Content-Type"));
            errorResponse.put("debug", debug);
        }

        log.info("üì§ API Error Response: {}", errorResponse);

        return ResponseEntity.status(statusCode)
                .contentType(MediaType.APPLICATION_JSON)
                .body(errorResponse);
    }

    /**
     * üåê X·ª≠ l√Ω Web errors - Tr·∫£ v·ªÅ HTML page
     */
    private String handleWebError(Integer statusCode, String requestURI, Model model) {
        // Th√™m attributes cho template
        model.addAttribute("statusCode", statusCode);
        model.addAttribute("requestURI", requestURI);
        model.addAttribute("timestamp", LocalDateTime.now());

        switch (statusCode) {
            case 403:
                log.warn("üö´ 403 Forbidden - Redirecting to 403 page");
                model.addAttribute("errorTitle", "Truy c·∫≠p b·ªã t·ª´ ch·ªëi");
                model.addAttribute("errorMessage", "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.");
                return "error/403";

            case 404:
                log.info("üîç 404 Not Found - Redirecting to 404 page");
                model.addAttribute("errorTitle", "Trang kh√¥ng t·ªìn t·∫°i");
                model.addAttribute("errorMessage", "Trang b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i.");
                return "error/404";

            case 500:
                log.error("üí• 500 Internal Server Error - Redirecting to 500 page");
                model.addAttribute("errorTitle", "L·ªói h·ªá th·ªëng");
                model.addAttribute("errorMessage", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.");
                return "error/500";

            default:
                log.error("‚ùì Unhandled error {} - Redirecting to generic error page", statusCode);
                model.addAttribute("errorTitle", "ƒê√£ x·∫£y ra l·ªói");
                model.addAttribute("errorMessage", "M√£ l·ªói: " + statusCode);
                return "error/error";
        }
    }

    /**
     * üîç Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i API request kh√¥ng
     */
    private boolean isApiRequest(HttpServletRequest request) {
        String acceptHeader = request.getHeader("Accept");
        String contentType = request.getHeader("Content-Type");
        String requestURI = request.getRequestURI();
        String xRequestedWith = request.getHeader("X-Requested-With");

        boolean isApi = (acceptHeader != null && acceptHeader.contains("application/json")) ||
                (contentType != null && contentType.contains("application/json")) ||
                (requestURI != null && (requestURI.startsWith("/api/") || requestURI.startsWith("/rest/"))) ||
                "XMLHttpRequest".equals(xRequestedWith);

        log.debug("üîç Request Analysis: URI={}, Accept={}, ContentType={}, IsAPI={}",
                requestURI, acceptHeader, contentType, isApi);

        return isApi;
    }
}
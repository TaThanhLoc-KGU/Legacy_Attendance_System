/**
 * ========================================
 * FACE ATTENDANCE - AUTH MANAGER (FINAL)
 * ƒê√£ ƒë∆∞·ª£c vi·∫øt l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ƒëƒÉng nh·∫≠p ho·∫°t ƒë·ªông m∆∞·ª£t m√†
 * ========================================
 */

let AuthManager = {
    // C·∫•u h√¨nh
    config: {
        apiBaseUrl: '/api',
        redirectDelay: 1000, // Delay chuy·ªÉn h∆∞·ªõng sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng (ms)
        alertTimeout: 5000, // Th·ªùi gian hi·ªÉn th·ªã th√¥ng b√°o (ms)
        maxLoginAttempts: 3, // S·ªë l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p t·ªëi ƒëa
        lockoutTime: 15 * 60 * 1000 // 15 ph√∫t kh√≥a t√†i kho·∫£n
    },

    // Tr·∫°ng th√°i
    state: {
        isLoading: false,
        loginAttempts: 0,
        isLocked: false
    },

    // Kh·ªüi t·∫°o
    init() {
        console.log('üöÄ AuthManager initializing...');
        console.log('üìç Current URL:', window.location.href);

        if (!window.localStorage || !window.fetch || !window.Promise) {
            alert('Tr√¨nh duy·ªát kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát hi·ªán ƒë·∫°i h∆°n.');
            return;
        }

        this.bindEvents();
        this.setupPasswordToggle();
        this.handleServerMessages();
        this.checkLockout();

        if (this.isOnLoginPage() && !this.hasUrlParameters()) {
            this.checkExistingLogin();
        } else {
            this.loadRememberedCredentials();
        }

        console.log('‚úÖ AuthManager initialized');
    },

    // Ki·ªÉm tra c√≥ ƒëang ·ªü trang login kh√¥ng
    isOnLoginPage() {
        const path = window.location.pathname;
        return ['/', '/index', '/index.html', '/login'].includes(path);
    },

    // Ki·ªÉm tra c√≥ tham s·ªë URL (error, message, skipRedirect)
    hasUrlParameters() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.has('error') || urlParams.has('message') || urlParams.has('skipRedirect');
    },

    // G·∫Øn s·ª± ki·ªán
    bindEvents() {
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        const forgotForm = document.getElementById('forgotPasswordForm');
        if (forgotForm) {
            forgotForm.addEventListener('submit', (e) => this.handleForgotPassword(e));
        }

        // X·ª≠ l√Ω ph√≠m Enter
        document.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !this.state.isLoading && !this.state.isLocked) {
                this.handleEnterKey(e);
            }
        });

        // X√°c th·ª±c real-time
        const inputs = document.querySelectorAll('input[required]');
        inputs.forEach(input => {
            input.addEventListener('blur', () => this.validateField(input));
            input.addEventListener('input', () => this.clearFieldError(input));
        });
    },

    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p hi·ªán t·∫°i
    async checkExistingLogin() {
        console.log('üîç Checking existing login...');

        const token = localStorage.getItem('accessToken');
        const userStr = localStorage.getItem('user');

        if (!token || !userStr) {
            console.log('üîì No auth data found');
            this.loadRememberedCredentials();
            return;
        }

        try {
            const user = JSON.parse(userStr);
            console.log('üë§ Found user:', user.username, 'Role:', user.vaiTro);

            // Ki·ªÉm tra token h·ª£p l·ªá qua API
            const isValid = await this.validateToken(token);
            if (isValid) {
                console.log('‚úÖ Valid token, redirecting...');
                this.redirectByRole(user.vaiTro);
            } else {
                console.log('‚ùå Invalid or expired token');
                this.clearAuthData();
                this.loadRememberedCredentials();
            }
        } catch (error) {
            console.error('‚ùå Error in checkExistingLogin:', error);
            this.clearAuthData();
            this.loadRememberedCredentials();
        }
    },

    // Load th√¥ng tin ƒëƒÉng nh·∫≠p ƒë√£ l∆∞u
    loadRememberedCredentials() {
        const rememberMe = localStorage.getItem('rememberMe');
        const savedUsername = localStorage.getItem('savedUsername');

        if (rememberMe === 'true' && savedUsername) {
            const usernameInput = document.getElementById('username');
            const rememberCheckbox = document.getElementById('rememberMe');
            if (usernameInput) usernameInput.value = savedUsername;
            if (rememberCheckbox) rememberCheckbox.checked = true;
            console.log('üíæ Loaded remembered username:', savedUsername);
        }
    },

    // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
    async handleLogin(event) {
        event.preventDefault();
        console.log('üîê Login attempt started...');

        if (this.state.isLoading || this.state.isLocked) {
            console.log('üõë Login blocked - loading or locked');
            return;
        }

        const form = event.target;
        const formData = new FormData(form);
        const credentials = {
            username: formData.get('username')?.trim(),
            password: formData.get('password'),
            rememberMe: formData.get('remember-me') === 'on'
        };

        if (!this.validateLoginForm(credentials)) {
            console.log('‚ùå Form validation failed');
            return;
        }

        if (this.state.loginAttempts >= this.config.maxLoginAttempts) {
            this.lockAccount();
            return;
        }

        try {
            this.setLoadingState(true);
            this.hideAlert();

            const response = await this.makeLoginRequest(credentials);
            await this.handleLoginResponse(response, credentials);
        } catch (error) {
            console.error('‚ùå Login error:', error);
            this.handleLoginError(error);
        } finally {
            this.setLoadingState(false);
        }
    },

    // X√°c th·ª±c form ƒëƒÉng nh·∫≠p
    validateLoginForm(credentials) {
        let isValid = true;
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');

        if (!credentials.username) {
            this.showFieldError(usernameInput, 'Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p');
            isValid = false;
        } else if (credentials.username.length < 3) {
            this.showFieldError(usernameInput, 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
            isValid = false;
        }

        if (!credentials.password) {
            this.showFieldError(passwordInput, 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u');
            isValid = false;
        } else if (credentials.password.length < 3) {
            this.showFieldError(passwordInput, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
            isValid = false;
        }

        return isValid;
    },

    // G·ª≠i y√™u c·∫ßu ƒëƒÉng nh·∫≠p
    async makeLoginRequest(credentials) {
        const response = await fetch(`${this.config.apiBaseUrl}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
                username: credentials.username,
                password: credentials.password
            })
        });

        let data;
        try {
            data = await response.json();
        } catch (e) {
            data = { message: 'Ph·∫£n h·ªìi server kh√¥ng h·ª£p l·ªá' };
        }

        return { response, data };
    },

    // X·ª≠ l√Ω ph·∫£n h·ªìi ƒëƒÉng nh·∫≠p
    async handleLoginResponse({ response, data }, credentials) {
        if (response.ok) {
            console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho user:', data.username);
            this.state.loginAttempts = 0;
            localStorage.removeItem('loginAttempts');
            localStorage.removeItem('lockoutTime');

            if (credentials.rememberMe) {
                localStorage.setItem('rememberMe', 'true');
                localStorage.setItem('savedUsername', data.username);
            } else {
                localStorage.removeItem('rememberMe');
                localStorage.removeItem('savedUsername');
            }

            this.showAlert('ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...', 'success');
            setTimeout(() => this.redirectByRole(data.vaiTro), this.config.redirectDelay);
        } else {
            console.log('‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:', data.message);
            this.state.loginAttempts++;
            localStorage.setItem('loginAttempts', this.state.loginAttempts);

            const attemptsLeft = this.config.maxLoginAttempts - this.state.loginAttempts;
            const errorMessage = data.message || 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c';

            if (attemptsLeft > 0) {
                this.showAlert(`${errorMessage}. C√≤n ${attemptsLeft} l·∫ßn th·ª≠.`, 'danger');
            } else {
                this.lockAccount();
            }
        }
    },

    // X·ª≠ l√Ω l·ªói ƒëƒÉng nh·∫≠p
    handleLoginError(error) {
        this.state.loginAttempts++;
        localStorage.setItem('loginAttempts', this.state.loginAttempts);

        const attemptsLeft = this.config.maxLoginAttempts - this.state.loginAttempts;
        const errorMessage = error.message.includes('fetch') ?
            'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra m·∫°ng.' :
            'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.';

        if (attemptsLeft > 0) {
            this.showAlert(`${errorMessage} C√≤n ${attemptsLeft} l·∫ßn th·ª≠.`, 'danger');
        } else {
            this.lockAccount();
        }
    },

    // Ki·ªÉm tra token h·ª£p l·ªá qua API
    async validateToken(token) {
        try {
            const response = await fetch(`${this.config.apiBaseUrl}/auth/validate-token`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'application/json'
                }
            });
            const data = await response.json();
            return response.ok && data.success;
        } catch (error) {
            console.error('‚ùå Token validation failed:', error);
            return false;
        }
    },

    // Chuy·ªÉn h∆∞·ªõng theo vai tr√≤
    redirectByRole(role) {
        console.log('üîÑ Redirecting for role:', role);

        const routes = {
            'ADMIN': '/admin/dashboard',
            'GIANGVIEN': '/lecturer/dashboard',
            'SINHVIEN': '/student/dashboard'
        };

        const targetRoute = routes[role];
        if (!targetRoute) {
            console.error('‚ùå Unknown role:', role);
            this.showAlert('Vai tr√≤ ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá', 'danger');
            this.clearAuthData();
            return;
        }

        // Tr√°nh chuy·ªÉn h∆∞·ªõng l·∫∑p
        if (window.location.pathname !== targetRoute) {
            console.log(`üîÑ Redirecting to ${targetRoute}`);
            window.location.href = targetRoute;
        } else {
            console.log('üìç Already on target page');
        }
    },

    // L∆∞u d·ªØ li·ªáu x√°c th·ª±c
    saveAuthData(data, rememberMe) {
        try {
            localStorage.setItem('accessToken', data.accessToken);
            localStorage.setItem('refreshToken', data.refreshToken || '');
            localStorage.setItem('user', JSON.stringify(data.user));
            localStorage.setItem('loginTime', new Date().toISOString());

            if (rememberMe) {
                localStorage.setItem('rememberMe', 'true');
                localStorage.setItem('savedUsername', data.user.username);
            } else {
                localStorage.removeItem('rememberMe');
                localStorage.removeItem('savedUsername');
            }

            console.log('‚úÖ Auth data saved');
        } catch (error) {
            console.error('‚ùå Error saving auth data:', error);
        }
    },

    // X√≥a d·ªØ li·ªáu x√°c th·ª±c
    clearAuthData() {
        ['accessToken', 'refreshToken', 'user', 'loginTime'].forEach(key => localStorage.removeItem(key));
        console.log('üóëÔ∏è Auth data cleared');
    },

    // Kh√≥a t√†i kho·∫£n
    lockAccount() {
        this.state.isLocked = true;
        const lockoutEnd = Date.now() + this.config.lockoutTime;
        localStorage.setItem('lockoutTime', lockoutEnd);

        this.showAlert(`T√†i kho·∫£n b·ªã kh√≥a do qu√° s·ªë l·∫ßn th·ª≠. Vui l√≤ng ƒë·ª£i ${this.config.lockoutTime / 60000} ph√∫t.`, 'warning');
        this.setFormDisabled(true);
        this.startLockoutCountdown(lockoutEnd);
    },

    // Ki·ªÉm tra tr·∫°ng th√°i kh√≥a
    checkLockout() {
        const lockoutTime = localStorage.getItem('lockoutTime');
        const loginAttempts = localStorage.getItem('loginAttempts');

        if (loginAttempts) {
            this.state.loginAttempts = parseInt(loginAttempts);
        }

        if (lockoutTime) {
            const lockoutEnd = parseInt(lockoutTime);
            const now = Date.now();

            if (now < lockoutEnd) {
                this.state.isLocked = true;
                this.setFormDisabled(true);
                this.startLockoutCountdown(lockoutEnd);
            } else {
                this.state.isLocked = false;
                localStorage.removeItem('lockoutTime');
                localStorage.removeItem('loginAttempts');
                this.state.loginAttempts = 0;
                this.setFormDisabled(false);
                this.showAlert('T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a.', 'info');
            }
        }
    },

    // ƒê·∫øm ng∆∞·ª£c th·ªùi gian kh√≥a
    startLockoutCountdown(lockoutEnd) {
        const countdownInterval = setInterval(() => {
            const timeLeft = lockoutEnd - Date.now();

            if (timeLeft <= 0) {
                clearInterval(countdownInterval);
                this.state.isLocked = false;
                this.setFormDisabled(false);
                localStorage.removeItem('lockoutTime');
                localStorage.removeItem('loginAttempts');
                this.state.loginAttempts = 0;
                this.hideAlert();
                this.showAlert('T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a.', 'info');
            } else {
                const minutes = Math.ceil(timeLeft / 60000);
                this.showAlert(`T√†i kho·∫£n b·ªã kh√≥a. C√≤n l·∫°i: ${minutes} ph√∫t.`, 'warning');
            }
        }, 1000);
    },

    // X·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u
    async handleForgotPassword(event) {
        event.preventDefault();
        if (this.state.isLoading) return;

        const form = event.target;
        const username = form.querySelector('#resetUsername')?.value.trim();
        const usernameInput = document.getElementById('resetUsername');

        if (!username) {
            this.showFieldError(usernameInput, 'Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p');
            return;
        }

        try {
            this.setLoadingState(true, 'resetPasswordBtn');
            const response = await fetch(`${this.config.apiBaseUrl}/auth/forgot-password?username=${encodeURIComponent(username)}`, {
                method: 'POST',
                headers: { 'Accept': 'application/json' }
            });

            const modal = bootstrap.Modal.getInstance(document.getElementById('forgotPasswordModal'));
            modal.hide();

            if (response.ok) {
                this.showAlert('Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i. Ki·ªÉm tra email c·ªßa b·∫°n.', 'success');
                this.resetForgotForm();
            } else {
                const data = await response.json();
                this.showAlert(data.message || 'L·ªói khi g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.', 'danger');
            }
        } catch (error) {
            console.error('‚ùå Forgot password error:', error);
            this.showAlert('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.', 'danger');
        } finally {
            this.setLoadingState(false, 'resetPasswordBtn');
        }
    },

    // C√†i ƒë·∫∑t toggle m·∫≠t kh·∫©u
    setupPasswordToggle() {
        const toggleBtn = document.getElementById('togglePassword');
        if (!toggleBtn) return;

        toggleBtn.addEventListener('click', () => {
            const passwordInput = document.getElementById('password');
            const icon = toggleBtn.querySelector('i');
            const type = passwordInput.type === 'password' ? 'text' : 'password';
            passwordInput.type = type;
            icon.classList.toggle('fa-eye', type === 'password');
            icon.classList.toggle('fa-eye-slash', type === 'text');
        });
    },

    // X·ª≠ l√Ω th√¥ng b√°o t·ª´ server
    handleServerMessages() {
        const urlParams = new URLSearchParams(window.location.search);
        const error = urlParams.get('error');
        const message = urlParams.get('message');

        if (error) {
            console.log('üì® Server error:', error);
            this.showAlert(this.getErrorMessage(error), 'danger');
        }
        if (message) {
            console.log('üì® Server message:', message);
            this.showAlert(this.getMessage(message), 'success');
        }
    },

    // X·ª≠ l√Ω ph√≠m Enter
    handleEnterKey(event) {
        const activeModal = document.querySelector('.modal.show');
        if (activeModal) {
            const submitBtn = activeModal.querySelector('.modal-footer .btn-primary');
            if (submitBtn && !submitBtn.disabled) {
                event.preventDefault();
                submitBtn.click();
            }
        } else {
            const loginForm = document.getElementById('loginForm');
            if (loginForm && !this.state.isLoading && !this.state.isLocked) {
                event.preventDefault();
                loginForm.dispatchEvent(new Event('submit'));
            }
        }
    },

    // X√°c th·ª±c tr∆∞·ªùng
    validateField(input) {
        const value = input.value.trim();
        if (!value && input.hasAttribute('required')) {
            this.showFieldError(input, 'Tr∆∞·ªùng n√†y l√† b·∫Øt bu·ªôc');
            return false;
        }
        if (input.name === 'username' && value.length < 3) {
            this.showFieldError(input, 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
            return false;
        }
        return true;
    },

    // Hi·ªÉn th·ªã l·ªói tr∆∞·ªùng
    showFieldError(input, message) {
        input.classList.add('is-invalid');
        const feedback = input.nextElementSibling;
        if (feedback?.classList.contains('invalid-feedback')) {
            feedback.textContent = message;
        }
    },

    // X√≥a l·ªói tr∆∞·ªùng
    clearFieldError(input) {
        input.classList.remove('is-invalid');
        const feedback = input.nextElementSibling;
        if (feedback?.classList.contains('invalid-feedback')) {
            feedback.textContent = '';
        }
    },

    // ƒê·∫∑t tr·∫°ng th√°i loading
    setLoadingState(isLoading, buttonId = 'loginBtn') {
        this.state.isLoading = isLoading;
        const button = document.getElementById(buttonId);
        if (button) {
            button.disabled = isLoading;
            button.classList.toggle('loading', isLoading);
        }
    },

    // V√¥ hi·ªáu h√≥a form
    setFormDisabled(disabled) {
        const form = document.getElementById('loginForm');
        if (form) {
            form.querySelectorAll('input, button').forEach(input => {
                input.disabled = disabled;
            });
        }
    },

    // Hi·ªÉn th·ªã th√¥ng b√°o
    showAlert(message, type = 'info') {
        const alertDiv = document.getElementById('alertMessage');
        const alertText = document.getElementById('alertText');
        if (!alertDiv || !alertText) return;

        alertDiv.className = `alert alert-${type}`;
        alertText.textContent = message;
        alertDiv.classList.remove('d-none');

        if (this.alertTimeout) clearTimeout(this.alertTimeout);
        this.alertTimeout = setTimeout(() => this.hideAlert(), this.config.alertTimeout);
    },

    // ·∫®n th√¥ng b√°o
    hideAlert() {
        const alertDiv = document.getElementById('alertMessage');
        if (alertDiv) alertDiv.classList.add('d-none');
        if (this.alertTimeout) {
            clearTimeout(this.alertTimeout);
            this.alertTimeout = null;
        }
    },

    // Reset form qu√™n m·∫≠t kh·∫©u
    resetForgotForm() {
        const form = document.getElementById('forgotPasswordForm');
        if (form) {
            form.reset();
            form.querySelectorAll('input').forEach(input => this.clearFieldError(input));
        }
    },

    // √Ånh x·∫° th√¥ng b√°o l·ªói
    getErrorMessage(errorCode) {
        const messages = {
            'login_failed': 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
            'not_authenticated': 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c',
            'invalid_role': 'Vai tr√≤ kh√¥ng h·ª£p l·ªá',
            'access_denied': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
            'session_expired': 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n'
        };
        return messages[errorCode] || 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.';
    },

    // √Ånh x·∫° th√¥ng b√°o th√†nh c√¥ng
    getMessage(messageCode) {
        const messages = {
            'logout_success': 'ƒêƒÉng xu·∫•t th√†nh c√¥ng',
            'password_reset': 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i',
            'account_created': 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o'
        };
        return messages[messageCode] || messageCode;
    },
};



// Kh·ªüi t·∫°o khi DOM s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåê DOM loaded, initializing AuthManager...');
    AuthManager.init();
});

// Xu·∫•t cho to√†n c·ª•c
window.AuthManager = AuthManager;